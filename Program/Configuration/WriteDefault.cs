using BSS.Logging;
using System;
using System.IO;

namespace Server
{
    internal static partial class ConfigurationLoader
    {
        // # ip to bind to
        // listenIP=0.0.0.0
        // 
        // # https port
        // securePort=443
        // 
        // # http port | will not be bound when enableRedirect=false
        // redirectPort=80
        // 
        // # redirect http to https
        // enableRedirect=true
        // 
        // # number of threads allocated to handle incoming connection
        // threads=32
        // 
        // # not implemented
        // protection=false
        // 
        // # allow certificate reload during runtime
        // enableReload=true
        // 
        // # path to secp384r1 pkcs12 file
        // pfxPath=certificate.pfx
        // 
        // # passphrase for the pkcs12 file (optional)
        // pfxPassword=Kennwort1

        private static Boolean WriteDefaultSettings(String path)
        {
            try
            {
                FileStream fileStream = new(path, FileMode.Create, FileAccess.Write, FileShare.Read, 1024, FileOptions.SequentialScan);

                Span<Byte> defaultFileContent = [0x23, 0x20, 0x69, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x69, 0x6E, 0x64, 0x20, 0x74, 0x6F, 0xD, 0xA, 0x6C, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x49, 0x50, 0x3D, 0x30, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x30, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x20, 0x70, 0x6F, 0x72, 0x74, 0xD, 0xA, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x6F, 0x72, 0x74, 0x3D, 0x34, 0x34, 0x33, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x70, 0x6F, 0x72, 0x74, 0x20, 0x7C, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x62, 0x6F, 0x75, 0x6E, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x65, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x3D, 0x66, 0x61, 0x6C, 0x73, 0x65, 0xD, 0xA, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x6F, 0x72, 0x74, 0x3D, 0x38, 0x30, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0xD, 0xA, 0x65, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x3D, 0x74, 0x72, 0x75, 0x65, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x63, 0x6F, 0x6D, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0xD, 0xA, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x3D, 0x33, 0x32, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x65, 0x64, 0xD, 0xA, 0x70, 0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x3D, 0x66, 0x61, 0x6C, 0x73, 0x65, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6C, 0x6F, 0x61, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0xD, 0xA, 0x65, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x52, 0x65, 0x6C, 0x6F, 0x61, 0x64, 0x3D, 0x74, 0x72, 0x75, 0x65, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x74, 0x6F, 0x20, 0x73, 0x65, 0x63, 0x70, 0x33, 0x38, 0x34, 0x72, 0x31, 0x20, 0x70, 0x6B, 0x63, 0x73, 0x31, 0x32, 0x20, 0x66, 0x69, 0x6C, 0x65, 0xD, 0xA, 0x70, 0x66, 0x78, 0x50, 0x61, 0x74, 0x68, 0x3D, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2E, 0x70, 0x66, 0x78, 0xD, 0xA, 0xD, 0xA, 0x23, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6B, 0x63, 0x73, 0x31, 0x32, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x28, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x29, 0xD, 0xA, 0x70, 0x66, 0x78, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x3D, 0x4B, 0x65, 0x6E, 0x6E, 0x77, 0x6F, 0x72, 0x74, 0x31];
                fileStream.Write(defaultFileContent);
                fileStream.Close();

                return true;
            }
            catch (Exception exception)
            {
                Log.FastLog("Failed to write default config file: " + exception.Message, LogSeverity.Error, LOG_WORD);
                return false;
            }
        }
    }
}